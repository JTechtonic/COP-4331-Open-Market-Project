swagger: '2.0'
info:
  description: This is the API documentation for the COP 4331 Marketplace App. Made by Jeovan Teixeira, Ethan Fluhr, and Remi Roper.
  version: 1.0.0
  title: Marketplace App
  contact:
    email: je127364@ucf.edu

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

paths:
  /login:
    post:
      tags:
      - Users
      summary: Logs in to the marketplace app
      operationId: dlLogin
      description: Logs in to the marketplace app, returns empty info with an error string saying if it worked or not
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: loginUser
        description: Login
        schema:
          $ref: '#/definitions/Login'
      responses:
        "Empty Error String":
          description: OK
          schema: 
            $ref: '#/definitions/LoginResponse'
        "No Records Found":
          description: Login couldn't find the user in the Users table with their login and password
  /register:
    post:
      tags:
      - Users
      summary: Regisers new users in to the marketplace app
      operationId: dlRegister
      description: Registers in to the marketplace app, returns new user ID and an error string saying if it worked or not
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: registerUser
        description: Register
        schema:
          $ref: '#/definitions/Register'
      responses:
        "Empty Error String":
          description: OK
          schema:
            $ref: '#/definitions/RegisterResponse'
        "User Already Exists":
          description: Duplicate User has been Found
  /emailVerify:
    post:
      tags:
      - Server
      summary: Checks if the user can verify their email or not
      operationId: dlVerifyEmail
      description: Takes in the user's id and verification number. If it matches the verification number in the database and was verified in time then they will be marked as verified. If not return an error.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: verifyEmail
        description: Email
        schema:
          $ref: '#/definitions/EmailVerify'
      responses:
        "User Id Not Found":
          description: The given id was not found in the database
        "User is already verified":
          description: The user has been verified before
        "User didn't verify in time":
          description: The user verified their account too late
        "Incorrect Verification Number":
          description: The given verification number did not match the database
        "Undefined Behavior Spotted":
          description: A database issue was encountered
        "Empty Error String":
          description: OK
          schema:
            $ref: '#/definitions/NormalResponse'
  /editUser:
    post:
      tags:
      - Users
      summary: Edits the user's account info with given fields
      operationId: dlEditUser
      description: Takes in the user's unique identifier and edit's their database document with given input fields.
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
        - $ref: '#/parameters/id'
        - $ref: '#/parameters/firstName'
        - $ref: '#/parameters/lastName'
        - $ref: '#/parameters/username'
        - $ref: '#/parameters/password'
        - $ref: '#/parameters/email'
        - $ref: '#/parameters/phoneNumber'
        - $ref: '#/parameters/aboutMe'
        - $ref: '#/parameters/image'
      responses:
        "Empty Error String":
          description: OK
          schema:
            $ref: '#/definitions/NormalResponse'
        "Non-Empty Error String":
          description: An error occured with updating the user
  /createPost:
    post:
      tags:
      - Posts
      summary: Creates a new post to show in the marketplace app
      operationId: dlCreatePost
      description: Creates a new post and puts it into the database, returns id of post and error string
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
        - $ref: '#/parameters/username'
        - $ref: '#/parameters/name'
        - $ref: '#/parameters/genre'
        - $ref: '#/parameters/price'
        - $ref: '#/parameters/desc'
        - $ref: '#/parameters/condition'
        - $ref: '#/parameters/image'
      responses:
        "Empty Error String":
          description: OK
          schema:
            $ref: '#/definitions/NormalResponse'
        "Post already exists":
          description: Duplicate post has been found
  /editPost:
    post:
      tags:
      - Posts
      summary: Edits the user's post with given fields
      operationId: dlEditPost
      description: Takes in the new post details and edits the post at the given id in the database.
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
        - $ref: '#/parameters/id'
        - $ref: '#/parameters/username'
        - $ref: '#/parameters/name'
        - $ref: '#/parameters/genre'
        - $ref: '#/parameters/price'
        - $ref: '#/parameters/desc'
        - $ref: '#/parameters/condition'
        - $ref: '#/parameters/image'
      responses:
        "Empty Error String":
          description: OK
          schema:
            $ref: '#/definitions/NormalResponse'
        "Non-Empty Error String":
          description: An error occured with updating the post
  /searchPost:
    post:
      tags:
      - Posts
      summary: Searches the database for posts given certain input
      operationId: dlsearchPost
      description: To search for all the posts in the database make sure to set the "searchType" field to "ALL". Otherwise to search for posts set only one of these fields (username, name, or genre) to a value and what gets returned is an array of objects pertaining to that field.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: searchPost
        description: search
        schema:
          $ref: '#/definitions/SearchPost'
      responses:
        "Empty Error String":
          description: OK
          schema:
            $ref: '#/definitions/SearchPostResponse'
        "Too many used fields":
          description: Input format was incorrect. Two fields must be blank.
  /deletePost:
    post:
      tags:
      - Posts
      summary: Deletes a certain post
      operationId: dldeletePost
      description: Takes in the info of a post and deletes it off the database.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: deletePost
        description: deleting
        schema:
          $ref: '#/definitions/DeletePost'
      responses:
        "Empty Error String":
          description: OK
          schema:
            $ref: '#/definitions/NormalResponse'
        "Post was not found":
          description: Database wasn't able to find the post
  /interestAddition:
    post:
      tags:
      - Posts
      summary: Adds the user to the interests section for the given post
      operationId: dlInterest
      description: Takes in the post id and user id and adjusts the database to show that the user is interested
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: interest
        description: Editing Interest
        schema:
          $ref: '#/definitions/InterestAddition'
      responses:
        "Empty Error String":
          description: OK
          schema:
            $ref: '#/definitions/ErrorOnlyResponse'
        "Non-Empty Error String":
          description: An error occured with updating the database
  /interestDeletion:
    post:
      tags:
      - Posts
      summary: Deletes the user to the interests section for the given post
      operationId: dlInterestDelete
      description: Takes in the post id and user id and adjusts the database to show that the user is uninterested
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: interest
        description: Editing Interest
        schema:
          $ref: '#/definitions/InterestAddition'
      responses:
        "Empty Error String":
          description: OK
          schema:
            $ref: '#/definitions/ErrorOnlyResponse'
        "Non-Empty Error String":
          description: An error occured with updating the database

  /getUser:
    post:
      tags:
      - Users
      summary: Get user object
      operationId: dlGetUser
      description: When given an id, return the user object associated with that id
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: GetUser
        description: Returns user objects
        schema:
          $ref: '#/definitions/GetUser'
      responses:
        "Empty Error String":
          description: OK
        "User was not found":
          description: The given user was not found
  /getPost:
    post:
      tags:
      - Posts
      summary: Get post object
      operationId: dlGetPost
      description: When given an id, return the post object associated with that id
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: GetPost
        description: Returns user objects
        schema:
          $ref: '#/definitions/GetPost'
      responses:
        "Empty Error String":
          description: OK
        "Post was not found":
          description: The given user was not found
          

parameters:
  id:
    in: multipart/form-data
    name: id
    type: string
    example: 12121fafwfaf103012
  username:
    in: multipart/form-data
    name: username
    type: string
    example: Fred121
  password:
    in: multipart/form-data
    name: password
    type: string
    example: Secret121
  email:
    in: multipart/form-data
    name: email
    type: string
    example: fred@doe.com
  phoneNumber:
    in: multipart/form-data
    name: phoneNumber
    type: string
    example: 121345323
  aboutMe:
    in: multipart/form-data
    name: aboutMe
    type: string
    example: About Me!
  firstName:
    in: multipart/form-data
    name: firstName
    type: string
    example: Fred
  lastName:
    in: multipart/form-data
    name: lastName
    type: string
    example: Doe
  name:
    in: multipart/form-data
    name: name
    type: string
    example: Fred
  genre:
    in: multipart/form-data
    name: genre
    type: string
    example: Cars
  price:
    in: multipart/form-data
    name: prices
    type: Number
    example: 22.50
  desc:
    in: multipart/form-data
    name: desc
    type: string
    example: Description
  condition:
    in: multipart/form-data
    name: condition
    type: string
    example: Good
  image:
    in: multipart/form-data
    name: image
    type: file

definitions:
  NormalResponse:
    type: object
    properties:
      _id:
        type: string
        example: 12121fafwfaf103012
      error:
        type: string
        example: ""
  ErrorOnlyResponse:
    type: object
    properties:
      error:
        type: string
        example: ""
  GetUser:
    type: object
    required:
    - User ID
    properties:
      userId:
        type: string
        example: 12121fafwfaf103012
  GetPost:
    type: object
    required:
    - Post ID
    properties:
      postId:
        type: string
        example: 12121fafwfaf103012
  Login:
    type: object
    required:
    - Login
    - Password
    properties:
      username:
        type: string
        example: fred
      password:
        type: string
        example: secret
  LoginResponse:
    type: object
    properties:
      id:
        type: string
        example: 12121fafwfaf103012
      firstName:
        type: string
        example: Fred
      lastName:
        type: string
        example: Doe
      email:
        type: string
        example: fred@doe.com
      error:
        type: string
        example: ""
  Register:
    type: object
    required:
    - First Name
    - Last Name
    - Username
    - Password
    - Email
    - Phone Number
    properties:
      firstname:
        type: string
        example: Fred
      lastname:
        type: string
        example: Doe
      username:
        type: string
        example: fred111
      password:
        type: string
        example: secret
      email:
        type: string
        example: fred@fred.com
      phoneNumber:
        type: string
        example: 4079981234
  RegisterResponse:
    type: object
    properties:
      _id:
        type: string
        example: 12121fafwfaf103012
      verifyNum:
        type: integer
        example: 12345
      error:
        type: string
        example: ""
  EmailVerify:
    type: object
    required:
    - id
    - Verification Number
    properties:
      id:
        type: string
        example: 12121fafwfaf103012
      verifyNum:
        type: integer
        example: 458792
  EditUser:
    type: object
    required:
    - id
    - New First Name
    - New Last Name
    - New Username
    - New Password
    - New Email
    - New Phone Number
    properties:
      id:
        type: string
        example: 12121fafwfaf103012
      newFirstName:
        type: string
        example: Fred
      newLastName:
        type: string
        example: Doe
      newUserName:
        type: string
        example: fred111
      newPassword:
        type: string
        example: secret
      newEmail:
        type: string
        example: fred@fred.com
      newPhoneNumber:
        type: string
        example: 4079981234
      newAboutMe:
        type: string
        example: Hi I am Fred
  CreatePost:
    type: object
    required:
    - Username
    - Name
    - Genre
    - Price
    - Description
    - Condition
    properties:
      username:
        type: string
        example: Fred1245
      name:
        type: string
        example: Fred
      genre:
        type: string
        example: Cars
      price:
        type: number
        example: 22.49
      desc:
        type: string
        example: Description
      condition:
        type: string
        example: Good as new
  EditPost:
    type: object
    required:
    - id
    - User Name
    - Name
    - Genre
    - Price
    - Description
    - Condition
    properties:
      id:
        type: string
        example: 12121fafwfaf103012
      username:
        type: string
        example: Fred121
      name:
        type: string
        example: Fred Doe
      genre:
        type: string
        example: Cars
      price:
        type: number
        example: 22.49
      desc:
        type: string
        example: Description
      condition:
        type: string
        example: Good as new
  InterestAddition:
    type: object
    required:
    - User ID
    - Post ID
    properties:
      userId:
        type: string
        example: 12121fafwfaf103012
      postId:
        type: string
        example: 1313131fwasdwad131
  SearchPost:
    type: object
    required:
    - Username
    - Name of Post
    - Genre
    properties:
      username:
        type: string
        example: Fred121
      name:
        type: string
        example: Fred
      genre: 
        type: string
        example: Cars
  SearchPostResponse:
    type: object
    properties:
      results: 
        type: array
        items:
          type: object
          properties:
            _id:
              type: string
              example: 1313131fwasdwad131
            username: 
              type: string
              example: Fred121
            name:
              type: string
              example: Fred
            genre:
              type: string
              example: Cars
            price:
              type: number
              example: 22.49
            desc: 
              type: string
              example: Description
            condition:
              type: string
              example: Good
      error:
        type: string
        example: ""
  DeletePost:
    type: object
    required:
    - Id
    properties:
      id:
        type: string
        example: 1313131fwasdwad131

host: cop4331-marketplace-98e1376d9db6.herokuapp.com
basePath: /api
schemes:
- https