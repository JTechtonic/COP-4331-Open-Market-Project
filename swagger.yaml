swagger: '2.0'
info:
  description: This is the API documentation for the COP 4331 Marketplace App. Made by Jeovan Teixeira, Ethan Fluhr, and Remi Roper.
  version: 1.0.0
  title: Marketplace App
  contact:
    email: je127364@ucf.edu

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

paths:
  /login:
    post:
      tags:
      - Users
      summary: Logs in to the marketplace app
      operationId: dlLogin
      description: Logs in to the marketplace app, returns empty info with an error string saying if it worked or not
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: loginUser
        description: Login
        schema:
          $ref: '#/definitions/Login'
      responses:
        "Empty Error String":
          description: OK
        "No Records Found":
          description: Login couldn't find the user in the Users table with their login and password
  /register:
    post:
      tags:
      - Users
      summary: Regisers new users in to the marketplace app
      operationId: dlRegister
      description: Registers in to the marketplace app, returns new user ID and an error string saying if it worked or not
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: registerUser
        description: Register
        schema:
          $ref: '#/definitions/Register'
      responses:
        "Empty Error String":
          description: OK
        "User Already Exists":
          description: Duplicate User has been Found
  /emailVerify:
    post:
      tags:
      - Server
      summary: Checks if the user can verify their email or not
      operationId: dlVerifyEmail
      description: Takes in the user's id and verification number. If it matches the verification number in the database and was verified in time then they will be marked as verified. If not return an error.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: verifyEmail
        description: Email
        schema:
          $ref: '#/definitions/EmailVerify'
      responses:
        "User Id Not Found":
          description: The given id was not found in the database
        "User is already verified":
          description: The user has been verified before
        "User didn't verify in time":
          description: The user verified their account too late
        "Incorrect Verification Number":
          description: The given verification number did not match the database
        "Undefined Behavior Spotted":
          description: A database issue was encountered
        "Empty Error String":
          description: OK
  /editUser:
    post:
      tags:
      - Users
      summary: Edits the user's account info with given fields
      operationId: dlEditUser
      description: Takes in the user's unique identifier and edit's their database document with given input fields.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: editUser
        description: Editing
        schema:
          $ref: '#/definitions/EditUser'
      responses:
        "Empty Error String":
          description: OK
        "Non-Empty Error String":
          description: An error occured with updating the user
  /createPost:
    post:
      tags:
      - Posts
      summary: Creates a new post to show in the marketplace app
      operationId: dlCreatePost
      description: Creates a new post and puts it into the database, returns id of post and error string
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: createPost
        description: Post
        schema:
          $ref: '#/definitions/CreatePost'
      responses:
        "Empty Error String":
          description: OK
        "Post already exists":
          description: Duplicate post has been found
  /editPost:
    post:
      tags:
      - Posts
      summary: Edits the user's post with given fields
      operationId: dlEditPost
      description: Takes in the new post details and edits the post at the given id in the database.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: editPost
        description: Editing
        schema:
          $ref: '#/definitions/EditPost'
      responses:
        "Empty Error String":
          description: OK
        "Non-Empty Error String":
          description: An error occured with updating the post
  /interestAddition:
    post:
      tags:
      - Posts
      summary: Adds the user to the interests section for the given post
      operationId: dlInterest
      description: Takes in the post id and user id and adjusts the database to show that the user is interested
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: interest
        description: Editing Interest
        schema:
          $ref: '#/definitions/InterestAddition'
      responses:
        "Empty Error String":
          description: OK
        "Non-Empty Error String":
          description: An error occured with updating the database
          
definitions:
  Login:
    type: object
    required:
    - Login
    - Password
    properties:
      username:
        type: string
        example: fred
      password:
        type: string
        example: secret
  Register:
    type: object
    required:
    - First Name
    - Last Name
    - Username
    - Password
    - Email
    - Phone Number
    properties:
      firstname:
        type: string
        example: Fred
      lastname:
        type: string
        example: Doe
      username:
        type: string
        example: fred111
      password:
        type: string
        example: secret
      email:
        type: string
        example: fred@fred.com
      phoneNumber:
        type: string
        example: 4079981234
  EmailVerify:
    type: object
    required:
    - id
    - Verification Number
    properties:
      id:
        type: string
        example: 12121fafwfaf103012
      verifyNum:
        type: integer
        example: 458792
  EditUser:
    type: object
    required:
    - id
    - New First Name
    - New Last Name
    - New Username
    - New Password
    - New Email
    - New Phone Number
    properties:
      id:
        type: string
        example: 12121fafwfaf103012
      newFirstName:
        type: string
        example: Fred
      newLastName:
        type: string
        example: Doe
      newUserName:
        type: string
        example: fred111
      newPassword:
        type: string
        example: secret
      newEmail:
        type: string
        example: fred@fred.com
      newPhoneNumber:
        type: string
        example: 4079981234
      newAboutMe:
        type: string
        example: Hi I am Fred
  CreatePost:
    type: object
    required:
    - Username
    - Name
    - Genre
    - Price
    - Description
    - Condition
    properties:
      username:
        type: string
        example: Fred1245
      name:
        type: string
        example: Fred
      genre:
        type: string
        example: Cars
      price:
        type: string
        example: 22.49
      desc:
        type: string
        example: Description
      condition:
        type: string
        example: Good as new
  EditPost:
    type: object
    required:
    - id
    - User Name
    - Name
    - Genre
    - Price
    - Description
    - Condition
    properties:
      id:
        type: string
        example: 12121fafwfaf103012
      username:
        type: string
        example: Fred121
      name:
        type: string
        example: Fred Doe
      genre:
        type: string
        example: Cars
      price:
        type: string
        example: 22.49
      desc:
        type: string
        example: Description
      condition:
        type: string
        example: Good as new
  InterestAddition:
    type: object
    required:
    - User ID
    - Post ID
    properties:
      userId:
        type: string
        example: 12121fafwfaf103012
      postId:
        type: string
        example: 1313131fwasdwad131

host: cop4331-marketplace-98e1376d9db6.herokuapp.com
basePath: /api
schemes:
- https